version: '3.1'

networks:
  app-network:
    driver: bridge

services:
    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        networks:
            - app-network
    
    kafka:
        image: confluentinc/cp-kafka:latest
        depends_on:
            - zookeeper
        ports:
            - 9092:9092
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        networks:
            - app-network
    
    kafdrop:
        image: obsidiandynamics/kafdrop
        depends_on:
            - "kafka"
        restart: "no"
        ports:
            - 9000:9000
        environment:
            KAFKA_BROKERCONNECT: "kafka:29092"
        networks:
            - app-network
              
    mongodb:
        image: mongo:latest
        container_name: mongodb
        restart: always
        ports:
            - "27017:27017"
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: password
        volumes:
            - mongodb_data:/data/db
            - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
        networks:
            - app-network

    mongo-express:
        image: mongo-express
        container_name: mongo-express
        restart: always
        depends_on:
            - mongodb
        environment:
            ME_CONFIG_BASICAUTH_USERNAME: admin
            ME_CONFIG_BASICAUTH_PASSWORD: password
            ME_CONFIG_MONGODB_ADMINUSERNAME: admin
            ME_CONFIG_MONGODB_ADMINPASSWORD: password
            ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
        ports:
            - "8081:8081"
        networks:
            - app-network
    
    angular:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        ports:
            - "4200:80"
        restart: always
        networks:
            - app-network
    
    api:
        build:
            context: ./backend/src
            dockerfile: RealEstateManagement.Api/Docker/Dockerfile
        ports:
            - "5000:80"
        depends_on:
            - mongodb
            - kafka
        environment:
            ASPNETCORE_ENVIRONMENT: "Production"
            ASPNETCORE_URLS: "http://+:80"
        restart: always
        networks:
            - app-network
    
    worker:
        build:
            context: ./backend/src
            dockerfile: RealEstateManagement.Worker/Docker/Dockerfile
        depends_on:
            - mongodb
            - kafka
        environment:
            ASPNETCORE_ENVIRONMENT: "Production"
        restart: always
        networks:
            - app-network

volumes:
    mongodb_data: